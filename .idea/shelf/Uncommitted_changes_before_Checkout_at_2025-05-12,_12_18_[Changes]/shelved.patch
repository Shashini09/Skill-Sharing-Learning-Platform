Index: client/src/pages/private/PostManagement/CreatePost.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { useAuth } from \"../../../context/AuthContext\";\nimport { storage } from '../../../firebase/firebase';\nimport { ref, uploadBytesResumable, getDownloadURL } from 'firebase/storage';\nimport axios from 'axios';\n\nconst CreatePost = () => {\n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  const [isListening, setIsListening] = useState(false);\n  const [language, setLanguage] = useState('en-US');\n  const navigate = useNavigate();\n  const { user } = useAuth();\n\n  const [post, setPost] = useState({\n    userId: '',\n    topic: '',\n    description: '',\n    mediaUrls: [],\n    mediaTypes: [],\n    isPrivate: false,\n    taggedFriends: [],\n    location: '',\n    timestamp: ''\n  });\n\n  const permittedMediaTypes = ['image/png', 'image/jpeg', 'video/mp4'];\n\n  const [mediaFiles, setMediaFiles] = useState([]);\n  const [uploadProgress, setUploadProgress] = useState(0);\n\n  useEffect(() => {\n    if (!user?.id) {\n      toast.error('User not logged in. Please log in to create a post.', { position: \"top-center\" });\n      setTimeout(() => navigate('/login'), 2000);\n      return;\n    }\n    const timestamp = new Date().toISOString();\n    setPost((prev) => ({ ...prev, userId: user.id, timestamp }));\n    detectLocation();\n  }, [navigate, user]);\n\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setPost({ ...post, [name]: type === 'checkbox' ? checked : value });\n  };\n\n  const startListening = () => {\n    if (!SpeechRecognition) return toast.error('Speech recognition not supported.', { position: \"top-center\" });\n    if (isListening) return toast.info('Already listening...', { position: \"top-center\" });\n\n    const recognition = new SpeechRecognition();\n    window.SpeechRecognitionInstance = recognition;\n    recognition.lang = language;\n    recognition.continuous = true;\n    recognition.interimResults = true;\n    recognition.start();\n prosent\n    setIsListening(true);\n\n    recognition.onresult = (event) => {\n      const transcript = Array.from(event.results)\n        .map((r) => r[0].transcript)\n        .join('');\n      setPost((prev) => ({ ...prev, description: transcript }));\n    };\n    recognition.onerror = (event) => {\n      toast.error(`Speech error: ${event.error}`, { position: \"top-center\" });\n      setIsListening(false);\n    };\n    recognition.onend = () => setIsListening(false);\n  };\n\n  const stopListening = () => {\n    if (window.SpeechRecognitionInstance) {\n      window.SpeechRecognitionInstance.stop();\n      setIsListening(false);\n    }\n  };\n\n  const detectLocation = () => {\n    if (!navigator.geolocation) return toast.error('Geolocation not supported.', { position: \"top-center\" });\n    navigator.geolocation.getCurrentPosition(\n      async ({ coords: { latitude, longitude } }) => {\n        try {\n          const res = await fetch(\n            `https://nominatim.openstreetmap.org/reverse?lat=${latitude}&lon=${longitude}&format=json`\n          );\n          const data = await res.json();\n          setPost((prev) => ({\n            ...prev,\n            location: data.display_name || `${latitude}, ${longitude}`,\n          }));\n        } catch {\n          toast.error('Could not fetch location.', { position: \"top-center\" });\n        }\n      },\n      () => toast.error('Location access denied.', { position: \"top-center\" })\n    );\n  };\n\n  const handleFileSelect = (e) => handleFileValidation(Array.from(e.target.files));\n  const handleFileDrop = (e) => {\n    e.preventDefault();\n    handleFileValidation(Array.from(e.dataTransfer.files));\n  };\n  const handleDragOver = (e) => e.preventDefault();\n\n  const handleFileValidation = (files) => {\n    const maxImageSize = 2 * 1024 * 1024; // 2MB in bytes\n    const maxImages = 3;\n    const maxVideos = 1;\n    const currentImages = mediaFiles.filter(f => f.file?.type?.startsWith('image')).length;\n    const currentVideos = mediaFiles.filter(f => f.file?.type === 'video/mp4').length;\n\n    const newFiles = [];\n    for (let file of files) {\n      if (!permittedMediaTypes.includes(file.type)) {\n        toast.error(`Invalid file type: ${file.name}. Only PNG, JPEG, and MP4 allowed.`, { position: \"top-center\" });\n        continue;\n      }\n\n      if (file.type.startsWith('image')) {\n        if (file.size > maxImageSize) {\n          toast.error(`Image too large: ${file.name}. Maximum 2MB allowed.`, { position: \"top-center\" });\n          continue;\n        }\n        if (currentImages + newFiles.filter(f => f.type?.startsWith('image')).length >= maxImages) {\n          toast.error(`Maximum ${maxImages} images allowed.`, { position: \"top-center\" });\n          continue;\n        }\n        newFiles.push({ file, url: URL.createObjectURL(file) });\n      }\n\n      if (file.type === 'video/mp4') {\n        if (currentVideos + newFiles.filter(f => f.type === 'video/mp4').length >= maxVideos) {\n          toast.error('Only one video is allowed.', { position: \"top-center\" });\n          continue;\n        }\n        const video = document.createElement('video');\n        video.preload = 'metadata';\n        video.onloadedmetadata = () => {\n          if (video.duration > 30) {\n            toast.error(`Video too long: ${file.name}. Maximum 30 30 seconds allowed.`, { position: \"top-center\" });\n          } else {\n            newFiles.push({ file, url: URL.createObjectURL(file) });\n          }\n        };\n        video.src = URL.createObjectURL(file);\n      }\n    }\n\n    if (newFiles.length > 0) {\n      setMediaFiles((prev) => [...prev, ...newFiles]);\n    }\n  };\n\n  const handleRemoveFile = (index) =>\n    setMediaFiles((prev) => prev.filter((_, i) => i !== index));\n  const moveFile = (index, direction) => {\n    const files = [...mediaFiles];\n    const newIndex = index + direction;\n    if (newIndex >= 0 && newIndex < files.length) {\n      [files[index], files[newIndex]] = [files[newIndex], files[index]];\n      setMediaFiles(files);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    try {\n      const mediaUrls = [];\n      const mediaTypes = [];\n      let totalProgress = 0;\n\n      for (let media of mediaFiles) {\n        const file = media.file;\n        const storageRef = ref(storage, `posts/${user.id}/${Date.now()}_${file.name}`);\n        const uploadTask = uploadBytesResumable(storageRef, file);\n\n        await new Promise((resolve, reject) => {\n          uploadTask.on(\n            'state_changed',\n            (snapshot) => {\n              const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n              totalProgress = Math.min(100, totalProgress + progress / mediaFiles.length);\n              setUploadProgress(Math.round(totalProgress));\n            },\n            (error) => {\n              toast.error(`Upload failed: ${error.message}`, { position: \"top-center\" });\n              reject(error);\n            },\n            async () => {\n              const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);\n              mediaUrls.push(downloadURL);\n              mediaTypes.push(file.type.startsWith('video') ? 'video' : 'image');\n              resolve();\n            }\n          );\n        });\n      }\n\n      const newPost = { ...post, mediaUrls, mediaTypes };\n      await axios.post('http://localhost:8080/api/posts/create', newPost, {\n        withCredentials: true,\n      });\n      toast.success('Post created successfully!', { position: \"top-center\" });\n      setTimeout(() => navigate('/postfeed'), 1500);\n    } catch (err) {\n      console.error('‚ùå Error submitting post:', err);\n      toast.error(`Failed to create post: ${err.response?.data || err.message}`, { position: \"top-center\" });\n    }\n  };\n\n  return (\n    <div className=\"p-6 max-w-2xl mx-auto bg-white rounded-lg shadow-md\">\n      <h2 className=\"text-3xl font-bold mb-6 text-gray-800\">Create New Post</h2>\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        <div>\n          <label className=\"block font-semibold mb-1 text-gray-700\">Topic</label>\n          <textarea\n            name=\"topic\"\n            value={post.topic}\n            onChange={handleInputChange}\n            placeholder=\"Post topic\"\n            className=\"w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          />\n        </div>\n\n        <div className=\"relative\">\n          <label className=\"block font-semibold mb-1 text-gray-700\">Description</label>\n          <textarea\n            name=\"description\"\n            value={post.description}\n            onChange={handleInputChange}\n            placeholder=\"Description\"\n            className=\"w-full p-3 border rounded-lg pr-28 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          />\n          <div className=\"absolute right-3 top-12 flex items-center space-x-2\">\n            <button\n              type=\"button\"\n              onClick={startListening}\n              disabled={isListening}\n              className={`text-sm px-3 py-1 rounded-lg transition ${\n                isListening\n                  ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\n                  : 'bg-blue-100 hover:bg-blue-200 text-blue-700'\n              }`}\n            >\n              \uD83C\uDFA4 Speak\n            </button>\n            <button\n              type=\"button\"\n              onClick={stopListening}\n              disabled={!isListening}\n              className={`text-sm px-3 py-1 rounded-lg transition ${\n                !isListening\n                  ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\n                  : 'bg-red-100 hover:bg-red-200 text-red-700'\n              }`}\n            >\n              \uD83D\uDED1 Stop\n            </button>\n            <select\n              value={language}\n              onChange={(e) => setLanguage(e.target.value)}\n              className=\"text-sm bg-white border rounded-lg px-2 py-1 focus:outline-none\"\n            >\n              <option value=\"en-US\">English</option>\n              <option value=\"si-LK\">Sinhala</option>\n              <option value=\"ta-IN\">Tamil</option>\n            </select>\n          </div>\n        </div>\n\n        <div className=\"flex gap-3 items-center\">\n          <input\n            type=\"text\"\n            name=\"location\"\n            placeholder=\"Location will auto-fill...\"\n            value={post.location}\n            onChange={handleInputChange}\n            className=\"w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          />\n          <button\n            type=\"button\"\n            onClick={detectLocation}\n            className=\"text-sm bg-gray-200 px-3 py-2 rounded-lg hover:bg-gray-300 transition\"\n          >\n            \uD83D\uDCCD\n          </button>\n        </div>\n\n        <div\n          onDrop={handleFileDrop}\n          onDragOver={handleDragOver}\n          className=\"w-full p-6 border-2 border-dashed border-blue-400 rounded-lg text-center text-gray-600 hover:bg-gray-50 transition\"\n        >\n          Drag and drop images/videos here, or click below\n          <input\n            type=\"file\"\n            multiple\n            accept=\".jpg,.jpeg,.png,.mp4\"\n            onChange={handleFileSelect}\n            className=\"w-full mt-3\"\n          />\n        </div>\n\n        {mediaFiles.length > 0 && (\n          <div className=\"grid grid-cols-2 gap-3 mt-4\">\n            {mediaFiles.map((p, i) => (\n              <div key={i} className=\"relative border p-2 rounded-lg group\">\n                <button\n                  type=\"button\"\n                  onClick={() => handleRemoveFile(i)}\n                  className=\"absolute top-2 right-2 bg-red-500 text-white rounded-full p-1 text-xs opacity-0 group-hover:opacity-100 transition-opacity\"\n                >\n                  ‚ùå\n                </button>\n                {i > 0 && (\n                  <button\n                    type=\"button\"\n                    onClick={() => moveFile(i, -1)}\n                    className=\"absolute left-2 top-2 bg-blue-500 text-white p-1 text-xs rounded\"\n                  >\n                    ‚¨Ü\uFE0F\n                  </button>\n                )}\n                {i < mediaFiles.length - 1 && (\n                  <button\n                    type=\"button\"\n                    onClick={() => moveFile(i, 1)}\n                    className=\"absolute left-2 bottom-2 bg-blue-500 text-white p-1 text-xs rounded\"\n                  >\n                    ‚¨á\uFE0F\n                  </button>\n                )}\n                {p.file.type.startsWith('video') ? (\n                  <video\n                    src={p.url}\n                    controls\n                    className=\"w-full max-h-40 object-cover rounded\"\n                  />\n                ) : (\n                  <img\n                    src={p.url}\n                    alt=\"Preview\"\n                    className=\"w-full max-h-40 object-cover rounded\"\n                  />\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n\n        {uploadProgress > 0 && uploadProgress < 100 && (\n          <div className=\"w-full bg-gray-200 h-2 rounded\">\n            <div\n              className=\"bg-blue-500 h-2 rounded\"\n              style={{ width: `${uploadProgress}%` }}\n            ></div>\n          </div>\n        )}\n\n        <input\n          type=\"text\"\n          name=\"taggedFriends\"\n          placeholder=\"Tagged friends (comma separated)\"\n          onChange={(e) =>\n            setPost({ ...post, taggedFriends: e.target.value.split(',').map((tag) => tag.trim()) })\n          }\n          className=\"w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        />\n\n        <button\n          type=\"submit\"\n          className=\"w-full py-3 rounded-lg text-white font-semibold bg-blue-500 hover:bg-blue-600 transition\"\n        >\n          Create Post\n        </button>\n      </form>\n      <ToastContainer position=\"top-center\" autoClose={2000} />\n    </div>\n  );\n};\n\nexport default CreatePost;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/pages/private/PostManagement/CreatePost.jsx b/client/src/pages/private/PostManagement/CreatePost.jsx
--- a/client/src/pages/private/PostManagement/CreatePost.jsx	(revision 8fa2f1f040b3b66fb4251a84c3b4b69f1896bdd9)
+++ b/client/src/pages/private/PostManagement/CreatePost.jsx	(date 1746943394069)
@@ -51,13 +51,12 @@
     if (!SpeechRecognition) return toast.error('Speech recognition not supported.', { position: "top-center" });
     if (isListening) return toast.info('Already listening...', { position: "top-center" });
 
-    const recognition = new SpeechRecognition();
+      const recognition = new SpeechRecognition();
     window.SpeechRecognitionInstance = recognition;
     recognition.lang = language;
     recognition.continuous = true;
     recognition.interimResults = true;
     recognition.start();
- prosent
     setIsListening(true);
 
     recognition.onresult = (event) => {
